{
	"name": "Fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CHICAGOSTAGESF",
						"type": "DatasetReference"
					},
					"name": "chicagostg"
				},
				{
					"dataset": {
						"referenceName": "BUSIDIM",
						"type": "DatasetReference"
					},
					"name": "bd"
				},
				{
					"dataset": {
						"referenceName": "RISK_DIM",
						"type": "DatasetReference"
					},
					"name": "rd"
				},
				{
					"dataset": {
						"referenceName": "DIM_LOCATION",
						"type": "DatasetReference"
					},
					"name": "ld"
				},
				{
					"dataset": {
						"referenceName": "VIOLSF",
						"type": "DatasetReference"
					},
					"name": "vd"
				},
				{
					"dataset": {
						"referenceName": "DATESF",
						"type": "DatasetReference"
					},
					"name": "dd"
				},
				{
					"dataset": {
						"referenceName": "InspectSF",
						"type": "DatasetReference"
					},
					"name": "id"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FACTSF",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "join6"
				},
				{
					"name": "select2"
				},
				{
					"name": "select7"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ROWID as decimal(38,0),",
				"          INSPECTION_ID as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> chicagostg",
				"source(output(",
				"          BUISNESS_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          SOURCE_CITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> bd",
				"source(output(",
				"          RISK_ID as decimal(38,0),",
				"          RISK_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> rd",
				"source(output(",
				"          LOCATION_ID as decimal(38,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          STREET_NUMBER as string,",
				"          STREET_NAME as string,",
				"          STREET_TYPE as string,",
				"          STREET_DIRECTION as string,",
				"          STREET_UNIT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> ld",
				"source(output(",
				"          VIOLATION_ID as decimal(38,0),",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string,",
				"          SOURCE_CITY as string,",
				"          VIOLATION_POINTS as string,",
				"          LICENSE_NUMBER as decimal(15,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> vd",
				"source(output(",
				"          DATE_ID as decimal(18,0),",
				"          DT as date,",
				"          DAY as decimal(2,0),",
				"          MONTH as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          YEAR as decimal(4,0),",
				"          QUARTER as decimal(2,0),",
				"          WEEK as decimal(2,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> dd",
				"source(output(",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          INSP_RESULT as string,",
				"          LICENSE_NUMBER as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> id",
				"aggregate1, bd join(aggregate1@DBA_NAME == bd@DBA_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, ld join(aggregate1@ADDRESS == ld@ADDRESS,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, dd join(INSPECTION_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3, vd join(aggregate1@VIOLATION_DESC == vd@VIOLATION_DESC,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4, rd join(RISK == RISK_DESC,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join5, id join(aggregate1@INSPECTION_DATE == id@INSPECTION_DATE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"chicagostg select(mapColumn(",
				"          LICENSE_NUMBER,",
				"          RISK,",
				"          ADDRESS,",
				"          INSPECTION_DATE,",
				"          RESULTS,",
				"          VIOLATION_DESC,",
				"          DBA_NAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"join6 select(mapColumn(",
				"          BUISNESS_ID,",
				"          LOCATION_ID,",
				"          VIOLATION_ID,",
				"          RISK_ID,",
				"          DATE_ID,",
				"          INSPECTION_ID = select6@INSPECTION_ID,",
				"          LICENSE_NUMBER = id@LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7 keyGenerate(output(FACT_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"select2 aggregate(groupBy(RISK,",
				"          ADDRESS,",
				"          RESULTS),",
				"     LICENSE_NUMBER = first(LICENSE_NUMBER),",
				"          INSPECTION_DATE = first(INSPECTION_DATE),",
				"          VIOLATION_DESC = first(VIOLATION_DESC),",
				"          DBA_NAME = first(DBA_NAME)) ~> aggregate1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FACT_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          LOCATION_ID as decimal(38,0),",
				"          VIOLATION_ID as decimal(38,0),",
				"          DATE_ID as decimal(38,0),",
				"          BUISNESS_ID as decimal(38,0),",
				"          RISK_ID as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          INSP_RESULT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sink1"
			]
		}
	}
}