{
	"name": "Fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CHICAGOSTAGESF",
						"type": "DatasetReference"
					},
					"name": "chicagostg"
				},
				{
					"dataset": {
						"referenceName": "BDIM2",
						"type": "DatasetReference"
					},
					"name": "bd"
				},
				{
					"dataset": {
						"referenceName": "RDIM",
						"type": "DatasetReference"
					},
					"name": "rd"
				},
				{
					"dataset": {
						"referenceName": "LDIM1",
						"type": "DatasetReference"
					},
					"name": "ld"
				},
				{
					"dataset": {
						"referenceName": "VDIM2",
						"type": "DatasetReference"
					},
					"name": "vd"
				},
				{
					"dataset": {
						"referenceName": "DDIM",
						"type": "DatasetReference"
					},
					"name": "dd"
				},
				{
					"dataset": {
						"referenceName": "IDIM1",
						"type": "DatasetReference"
					},
					"name": "id"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FACT",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "select7"
				},
				{
					"name": "select8"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "window1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ROWID as decimal(38,0),",
				"          INSPECTION_ID as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> chicagostg",
				"source(output(",
				"          BUISNESS_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          FACILITY_TYPE as string,",
				"          SOURCE_CITY as string,",
				"          LICENSE_NUMBER as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> bd",
				"source(output(",
				"          RISK_ID as decimal(38,0),",
				"          RISK_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> rd",
				"source(output(",
				"          LOCATION_ID as decimal(38,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          STREET_NUMBER as string,",
				"          STREET_NAME as string,",
				"          STREET_TYPE as string,",
				"          STREET_DIRECTION as string,",
				"          STREET_UNIT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> ld",
				"source(output(",
				"          VIOLATION_ID as decimal(38,0),",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string,",
				"          SOURCE_CITY as string,",
				"          VIOLATION_POINTS as string,",
				"          LICENSE_NUMBER as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> vd",
				"source(output(",
				"          DATE_ID as decimal(18,0),",
				"          DT as date,",
				"          DAY as decimal(2,0),",
				"          MONTH as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          YEAR as decimal(4,0),",
				"          QUARTER as decimal(2,0),",
				"          WEEK as decimal(2,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> dd",
				"source(output(",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          INSP_RESULT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> id",
				"select2, bd join(select2@DBA_NAME == bd@DBA_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select7, ld join(select7@ADDRESS == ld@ADDRESS,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"select6, derivedColumn2 join(INSPECTION_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"select4, rd join(RISK == RISK_DESC,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"select8, id join(select8@INSPECTION_DATE == id@INSPECTION_DATE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"chicagostg select(mapColumn(",
				"          LICENSE_NUMBER,",
				"          RISK,",
				"          ADDRESS,",
				"          INSPECTION_DATE,",
				"          RESULTS,",
				"          VIOLATION_DESC,",
				"          DBA_NAME,",
				"          COMMENTS,",
				"          VIOLATION_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"filter1 keyGenerate(output(FACT_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"dd derive(DT = toString(DT, 'MM/dd/yyyy')) ~> derivedColumn2",
				"lookup1 select(mapColumn(",
				"          BUISNESS_ID,",
				"          LOCATION_ID,",
				"          DATE_ID,",
				"          VIOLATION_ID,",
				"          RISK_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_SCORE,",
				"          LICENSE_NUMBER = vd@LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"join3 select(mapColumn(",
				"          RISK,",
				"          LICENSE_NUMBER,",
				"          INSPECTION_DATE,",
				"          VIOLATION_DESC,",
				"          BUISNESS_ID,",
				"          LOCATION_ID,",
				"          DATE_ID,",
				"          VIOLATION_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"join5 select(mapColumn(",
				"          LICENSE_NUMBER,",
				"          BUISNESS_ID,",
				"          LOCATION_ID,",
				"          DATE_ID,",
				"          RISK_ID,",
				"          INSPECTION_SK,",
				"          INSPECTION_SCORE,",
				"          VIOLATION_CODE,",
				"          VIOLATION_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"join2 select(mapColumn(",
				"          RISK,",
				"          INSPECTION_DATE,",
				"          VIOLATION_DESC,",
				"          BUISNESS_ID,",
				"          LOCATION_ID,",
				"          LICENSE_NUMBER,",
				"          VIOLATION_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"join1 select(mapColumn(",
				"          RISK,",
				"          ADDRESS,",
				"          INSPECTION_DATE,",
				"          VIOLATION_DESC,",
				"          BUISNESS_ID,",
				"          LICENSE_NUMBER = bd@LICENSE_NUMBER,",
				"          VIOLATION_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"join4 select(mapColumn(",
				"          LICENSE_NUMBER,",
				"          INSPECTION_DATE,",
				"          VIOLATION_DESC,",
				"          BUISNESS_ID,",
				"          LOCATION_ID,",
				"          DATE_ID,",
				"          RISK_ID,",
				"          VIOLATION_CODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select5, vd lookup(select5@VIOLATION_CODE == vd@VIOLATION_CODE",
				"     && select5@LICENSE_NUMBER == vd@LICENSE_NUMBER,",
				"     multiple: false,",
				"     pickup: 'first',",
				"     asc(vd@LICENSE_NUMBER, true),",
				"     broadcast: 'auto')~> lookup1",
				"select3 window(over(VIOLATION_ID,",
				"          LICENSE_NUMBER),",
				"     asc(INSPECTION_SK, true),",
				"     rowNumber = rowNumber()) ~> window1",
				"window1 filter(rowNumber == 1 ",
				"&& !isNull(VIOLATION_ID) ",
				"&& !isNull(LICENSE_NUMBER) ",
				"&& !isNull(INSPECTION_SK) ",
				"&& !isNull(DATE_ID)) ~> filter1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FACT_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          LOCATION_ID as decimal(38,0),",
				"          VIOLATION_ID as decimal(38,0),",
				"          BUISNESS_ID as decimal(38,0),",
				"          DATE_ID as decimal(38,0),",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          RISK_ID as decimal(38,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          FACT_SK,",
				"          LOCATION_ID,",
				"          VIOLATION_ID,",
				"          DATE_ID,",
				"          BUISNESS_ID,",
				"          RISK_ID,",
				"          INSPECTION_SCORE,",
				"          INSPECTION_ID = INSPECTION_SK",
				"     )) ~> sink1"
			]
		}
	}
}