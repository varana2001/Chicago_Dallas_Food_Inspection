{
	"name": "DIM_LOCATION_DALLAS",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Dallas_DT",
						"type": "DatasetReference"
					},
					"name": "DallasSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DIM_LOCATION",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select3"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RecordID as integer,",
				"          {Restaurant Name} as string,",
				"          {Inspection Type} as string,",
				"          {Inspection Date} as date,",
				"          {Inspection Score} as short,",
				"          {Street Number} as short,",
				"          {Street Name} as string,",
				"          {Street Direction} as string,",
				"          {Street Type} as string,",
				"          {Street Unit} as string,",
				"          {Street Address} as string,",
				"          {Zip Code} as integer,",
				"          {Inspection Month} as string,",
				"          {Inspection Year} as string,",
				"          {Lat Long Location} as string,",
				"          Clean_Restaurant_Name as string,",
				"          IsCoordinateRow as boolean,",
				"          LatLongLocation as string,",
				"          Name as string,",
				"          Value as string,",
				"          CLEAN as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DallasSource",
				"DallasSource select(mapColumn(",
				"          RESTRAURANT_NAME = {Restaurant Name},",
				"          ADDRESS = {Street Address},",
				"          ZIP = {Zip Code},",
				"          LOCATION = LatLongLocation,",
				"          STREET_NUMBER = {Street Number},",
				"          STREET_NAME = {Street Name},",
				"          STREET_TYPE = {Street Type},",
				"          STREET_DIRECTION = {Street Direction},",
				"          STREET_UNIT = {Street Unit}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(CITY = 'DALLAS',",
				"          STATE = 'TX',",
				"          LATITUDE = trim(split(replace(replace(LOCATION, '(', ''), ')', ''), ',')[1]),",
				"          LONGITUDE = trim(split(replace(replace(LOCATION, '(', ''), ')', ''), ',')[2]),",
				"          STREET_DIRECTION = iif(isNull(STREET_DIRECTION) || trim(STREET_DIRECTION) == '', 'None', STREET_DIRECTION),",
				"          STREET_UNIT = iif(isNull(STREET_UNIT) || trim(STREET_UNIT) == '', 'None', STREET_UNIT)) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          LOCATION,",
				"          STREET_NUMBER,",
				"          STREET_NAME,",
				"          STREET_TYPE,",
				"          STREET_DIRECTION,",
				"          STREET_UNIT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"aggregate1 derive(LATITUDE = iif(isNull(LATITUDE), 'None', LATITUDE),",
				"          LOCATION = iif(isNull(LOCATION), 'None', LOCATION),",
				"          LONGITUDE = iif(isNull(LONGITUDE), 'None', LONGITUDE),",
				"          STREET_TYPE = iif(isNull(STREET_TYPE), 'None', STREET_TYPE)) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          LOCATION,",
				"          STREET_NUMBER,",
				"          STREET_NAME,",
				"          STREET_TYPE,",
				"          STREET_DIRECTION,",
				"          STREET_UNIT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select2 aggregate(groupBy(ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP),",
				"     LATITUDE = first(LATITUDE),",
				"          LONGITUDE = first(LONGITUDE),",
				"          LOCATION = first(LOCATION),",
				"          STREET_NUMBER = first(STREET_NUMBER),",
				"          STREET_NAME = first(STREET_NAME),",
				"          STREET_TYPE = first(STREET_TYPE),",
				"          STREET_DIRECTION = first(STREET_DIRECTION),",
				"          STREET_UNIT = first(STREET_UNIT)) ~> aggregate1",
				"select3 keyGenerate(output(LOCATION_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LOCATION_ID as decimal(38,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          STREET_NUMBER as string,",
				"          STREET_NAME as string,",
				"          STREET_TYPE as string,",
				"          STREET_DIRECTION as string,",
				"          STREET_UNIT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LOCATION_ID,",
				"          ADDRESS,",
				"          CITY,",
				"          STATE,",
				"          ZIP,",
				"          LATITUDE,",
				"          LONGITUDE,",
				"          LOCATION,",
				"          STREET_NAME,",
				"          STREET_TYPE,",
				"          STREET_DIRECTION,",
				"          STREET_UNIT",
				"     )) ~> sink1"
			]
		}
	}
}