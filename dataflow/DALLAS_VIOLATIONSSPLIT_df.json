{
	"name": "DALLAS_VIOLATIONSSPLIT_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "newdallas",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable3",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "surrogateKey2"
				},
				{
					"name": "flatten1"
				},
				{
					"name": "derivedColumn7"
				},
				{
					"name": "derivedColumn8"
				},
				{
					"name": "derivedColumn9"
				},
				{
					"name": "derivedColumn10"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "derivedColumn11"
				},
				{
					"name": "derivedColumn12"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "derivedColumn13"
				},
				{
					"name": "derivedColumn14"
				},
				{
					"name": "derivedColumn15"
				},
				{
					"name": "derivedColumn16"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RecordID as string,",
				"          {Restaurant Name} as string,",
				"          {Inspection Type} as string,",
				"          {Inspection Date} as string,",
				"          {Inspection Score} as string,",
				"          {Street Number} as string,",
				"          {Street Name} as string,",
				"          {Street Direction} as string,",
				"          {Street Type} as string,",
				"          {Street Unit} as string,",
				"          {Street Address} as string,",
				"          {Zip Code} as string,",
				"          {Inspection Month} as string,",
				"          {Inspection Year} as string,",
				"          {Lat Long Location} as string,",
				"          Clean_Restaurant_Name as string,",
				"          IsCoordinateRow as string,",
				"          LatLongLocation as string,",
				"          Name as string,",
				"          Value as string,",
				"          CLEAN as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"derivedColumn3 select(mapColumn(",
				"          Restaurant_Name = Clean_Restaurant_Name,",
				"          violation_desc,",
				"          violation_comment,",
				"          violation_points",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(License_no as long),",
				"     startAt: 10001L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(License_no = toInteger(License_no)) ~> derivedColumn2",
				"source1 pivot(groupBy(Clean_Restaurant_Name),",
				"     pivotBy(Name),",
				"     {} = first(Value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot1",
				"pivot1 derive(violation_desc = iif(isNull(toString(byName('Violation Description - 1'))), '', toString(byName('Violation Description - 1')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 2'))), '', toString(byName('Violation Description - 2')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 3'))), '', toString(byName('Violation Description - 3')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 4'))), '', toString(byName('Violation Description - 4')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 5'))), '', toString(byName('Violation Description - 5')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 6'))), '', toString(byName('Violation Description - 6')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 7'))), '', toString(byName('Violation Description - 7')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 8'))), '', toString(byName('Violation Description - 8')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 9'))), '', toString(byName('Violation Description - 9')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Description - 10'))), '', toString(byName('Violation Description - 10'))),",
				"          violation_comment = iif(isNull(toString(byName('Violation Memo - 1'))), '', toString(byName('Violation Memo - 1')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 2'))), '', toString(byName('Violation Memo - 2')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 3'))), '', toString(byName('Violation Memo - 3')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 4'))), '', toString(byName('Violation Memo - 4')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 5'))), '', toString(byName('Violation Memo - 5')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 6'))), '', toString(byName('Violation Memo - 6')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 7'))), '', toString(byName('Violation Memo - 7')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 8'))), '', toString(byName('Violation Memo - 8')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 9'))), '', toString(byName('Violation Memo - 9')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Memo - 10'))), '', toString(byName('Violation Memo - 10'))),",
				"          violation_points = iif(isNull(toString(byName('Violation Points - 1'))), '', toString(byName('Violation Points - 1')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 2'))), '', toString(byName('Violation Points - 2')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 3'))), '', toString(byName('Violation Points - 3')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 4'))), '', toString(byName('Violation Points - 4')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 5'))), '', toString(byName('Violation Points - 5')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 6'))), '', toString(byName('Violation Points - 6')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 7'))), '', toString(byName('Violation Points - 7')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 8'))), '', toString(byName('Violation Points - 8')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 9'))), '', toString(byName('Violation Points - 9')) + ';') +\r",
				"iif(isNull(toString(byName('Violation Points - 10'))), '', toString(byName('Violation Points - 10')))) ~> derivedColumn3",
				"derivedColumn2 derive(violation_desc = split(violation_desc, ';')) ~> derivedColumn4",
				"derivedColumn16 keyGenerate(output(violation_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey2 foldDown(unroll(violation_desc),",
				"     mapColumn(",
				"          Restaurant_Name,",
				"          violation_desc,",
				"          violation_comment,",
				"          violation_points,",
				"          License_no,",
				"          violation_id",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten1",
				"flatten1 derive(violation_code = toInteger(\r",
				"    trim(\r",
				"        regexExtract(violation_desc, '^\\\\*?(\\\\d+)', 1)\r",
				"    )\r",
				")) ~> derivedColumn7",
				"derivedColumn7 derive(violation_description = trim(\r",
				"    regexReplace(violation_desc, '^\\\\*?\\\\d+\\\\s*', '')\r",
				")) ~> derivedColumn8",
				"flatten2 derive(source_city = \"Dallas\") ~> derivedColumn9",
				"derivedColumn8 derive(violation_comment = split(violation_comment, \";\")) ~> derivedColumn10",
				"derivedColumn10 foldDown(unroll(violation_comment),",
				"     mapColumn(",
				"          Restaurant_Name,",
				"          violation_desc,",
				"          violation_comment,",
				"          violation_points,",
				"          License_no,",
				"          violation_id,",
				"          violation_code,",
				"          violation_description",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"derivedColumn15 derive(arrayIndex = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) ~> derivedColumn11",
				"flatten3 derive(flat_desc = iif(size(violation_desc) >= arrayIndex, violation_desc[arrayIndex-1], \"None\")\r",
				") ~> derivedColumn12",
				"derivedColumn11 foldDown(unroll(arrayIndex),",
				"     mapColumn(",
				"          Restaurant_Name,",
				"          violation_desc,",
				"          violation_comment,",
				"          violation_points,",
				"          License_no,",
				"          arrayIndex",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"derivedColumn12 derive(flat_comment = iif(size(violation_comment) >= arrayIndex, violation_comment[arrayIndex-1], \"\")) ~> derivedColumn13",
				"derivedColumn4 derive(violation_comment = split(violation_comment, \";\")) ~> derivedColumn14",
				"derivedColumn14 derive(violation_points = split(violation_points, \";\")) ~> derivedColumn15",
				"derivedColumn13 derive(violation_points = iif(size(violation_points) >= arrayIndex, violation_points[arrayIndex-1], \"\")) ~> derivedColumn16",
				"derivedColumn9 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          VIOLATION_ID as decimal(38,0),",
				"          START_DATE as date,",
				"          END_DATE as date,",
				"          IS_CURRENT as decimal(38,0),",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string,",
				"          SOURCE_CITY as string,",
				"          DBA_NAME as string,",
				"          LICENSE_NUMBER as decimal(15,0),",
				"          VIOLATION_POINTS as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          VIOLATION_ID = violation_id,",
				"          VIOLATION_CODE = violation_code,",
				"          VIOLATION_DESC = violation_description,",
				"          SOURCE_CITY = source_city,",
				"          DBA_NAME = Restaurant_Name,",
				"          LICENSE_NUMBER = License_no",
				"     )) ~> sink1"
			]
		}
	}
}