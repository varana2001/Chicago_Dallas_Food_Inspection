{
	"name": "FACT_INSPECTION",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CHICAGOSTAGESF",
						"type": "DatasetReference"
					},
					"name": "ChicagoStg"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTableDIM_LOC",
						"type": "DatasetReference"
					},
					"name": "LOCDIM"
				},
				{
					"dataset": {
						"referenceName": "RISK_DIM",
						"type": "DatasetReference"
					},
					"name": "RISKDIM"
				},
				{
					"dataset": {
						"referenceName": "DallasSTGSF",
						"type": "DatasetReference"
					},
					"name": "DALLASSTG"
				},
				{
					"dataset": {
						"referenceName": "VIOLSF",
						"type": "DatasetReference"
					},
					"name": "VIOLDIM"
				},
				{
					"dataset": {
						"referenceName": "DATESF",
						"type": "DatasetReference"
					},
					"name": "DATEDIM"
				},
				{
					"dataset": {
						"referenceName": "BUSIDIM",
						"type": "DatasetReference"
					},
					"name": "BUSIDIM"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FACTSF",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "join4"
				},
				{
					"name": "join5"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "select7"
				},
				{
					"name": "select8"
				},
				{
					"name": "join6"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ROWID as decimal(38,0),",
				"          INSPECTION_ID as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> ChicagoStg",
				"source(output(",
				"          LOCATION_ID as decimal(38,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          STREET_NUMBER as string,",
				"          STREET_NAME as string,",
				"          STREET_TYPE as string,",
				"          STREET_DIRECTION as string,",
				"          STREET_UNIT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> LOCDIM",
				"source(output(",
				"          RISK_ID as decimal(38,0),",
				"          RISK_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> RISKDIM",
				"source(output(",
				"          ROWID as decimal(38,0),",
				"          INSPECTION_ID as string,",
				"          RESTAURANTNAME as string,",
				"          INSPECTIONTYPE as string,",
				"          INSPECTIONDATE as string,",
				"          INSPECTIONSCORE as string,",
				"          STREETNUMBER as string,",
				"          STREETNAME as string,",
				"          STREETDIRECTION as string,",
				"          STREETTYPE as string,",
				"          STREETUNIT as string,",
				"          STREETADDRESS as string,",
				"          ZIPCODE as string,",
				"          INSPECTIONMONTH as string,",
				"          INSPECTIONYEAR as string,",
				"          LATLONGLOCATION as string,",
				"          VIOLATIONS as string,",
				"          COMMENTS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DALLASSTG",
				"source(output(",
				"          VIOLATION_ID as decimal(38,0),",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string,",
				"          SOURCE_CITY as string,",
				"          VIOLATION_POINTS as string,",
				"          LICENSE_NUMBER as decimal(15,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> VIOLDIM",
				"source(output(",
				"          DATE_ID as decimal(18,0),",
				"          DT as date,",
				"          DAY as decimal(2,0),",
				"          MONTH as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          YEAR as decimal(4,0),",
				"          QUARTER as decimal(2,0),",
				"          WEEK as decimal(2,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DATEDIM",
				"source(output(",
				"          BUISNESS_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          SOURCE_CITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> BUSIDIM",
				"select2, LOCDIM join(select2@ADDRESS == LOCDIM@ADDRESS,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, VIOLDIM join(select2@VIOLATION_DESC == VIOLDIM@VIOLATION_DESC,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, DATEDIM join(INSPECTION_DATE == toString(DT),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"select5, BUSIDIM join(select5@DBA_NAME == BUSIDIM@DBA_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"select6, RISKDIM join(RISK == RISK_DESC,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"select8 keyGenerate(output(FACT_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"ChicagoStg select(mapColumn(",
				"          INSPECTION_ID,",
				"          DBA_NAME,",
				"          RISK,",
				"          ADDRESS,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          RESULTS,",
				"          VIOLATIONS,",
				"          VIOLATION_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"surrogateKey1 derive(INSP_RESULTS = iif((RESULTS==\"Pass\"),1,0),",
				"          INSPECTION_DATE = toDate(INSPECTION_DATE, 'MM/dd/yyyy')) ~> derivedColumn1",
				"join3 select(mapColumn(",
				"          INSPECTION_ID,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          LOCATION_ID,",
				"          VIOLATION_ID,",
				"          DATE_ID,",
				"          RESULTS,",
				"          RISK,",
				"          DBA_NAME",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"join4 select(mapColumn(",
				"          INSPECTION_ID,",
				"          LOCATION_ID,",
				"          VIOLATION_ID,",
				"          DATE_ID,",
				"          BUISNESS_ID,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          RISK,",
				"          RESULTS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"join5 select(mapColumn(",
				"          INSPECTION_ID,",
				"          LOCATION_ID,",
				"          VIOLATION_ID,",
				"          DATE_ID,",
				"          BUISNESS_ID,",
				"          RISK_ID,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          RESULTS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"join6 select(mapColumn(",
				"          LOCATION_ID,",
				"          VIOLATION_ID,",
				"          DATE_ID,",
				"          BUISNESS_ID,",
				"          RISK_ID,",
				"          INSPECTION_DATE,",
				"          INSPECTION_TYPE,",
				"          INSPECTIONSCORE,",
				"          INSPECTION_ID = select7@INSPECTION_ID,",
				"          RESULTS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select7, DALLASSTG join(select7@INSPECTION_ID == DALLASSTG@INSPECTION_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join6",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FACT_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          LOCATION_ID as decimal(38,0),",
				"          VIOLATION_ID as decimal(38,0),",
				"          DATE_ID as decimal(38,0),",
				"          BUISNESS_ID as decimal(38,0),",
				"          RISK_ID as decimal(38,0),",
				"          INSPECTION_DATE as date,",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          INSP_RESULT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sink1"
			]
		}
	}
}