{
	"name": "chicago_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "chicago_dataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CHICAGO_STG",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "splitandtoint"
				},
				{
					"name": "RowIDSK"
				},
				{
					"name": "Violationsdescandcomments"
				},
				{
					"name": "FlatteningViolations"
				},
				{
					"name": "violationdesc"
				},
				{
					"name": "comments"
				},
				{
					"name": "ViolationCode"
				},
				{
					"name": "RenamingColumns"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Inspection ID} as string,",
				"          {DBA Name} as string,",
				"          {AKA Name} as string,",
				"          {License #} as string,",
				"          {Facility Type} as string,",
				"          Risk as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          {Inspection Date} as string,",
				"          {Inspection Type} as string,",
				"          Results as string,",
				"          Violations as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"RenamingColumns derive(Zip = toInteger(Zip),",
				"          License_no = toInteger(License_number),",
				"          DBA_Name = iif(isNull(DBA_Name), \"Unknown\", DBA_Name),",
				"          Violations = split(Violations, '|')) ~> splitandtoint",
				"ViolationCode keyGenerate(output(rowid as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> RowIDSK",
				"FlatteningViolations derive(violation_part = split(Violations, ' - Comments: ')) ~> Violationsdescandcomments",
				"splitandtoint foldDown(unroll(Violations),",
				"     mapColumn(",
				"          Inspection_ID,",
				"          DBA_Name,",
				"          AKA_Name,",
				"          License_no,",
				"          Facility_Type,",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Inspection_Date,",
				"          {Inspection _Type} = Inspection_Type,",
				"          Results,",
				"          Violations,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlatteningViolations",
				"Violationsdescandcomments derive(violation_desc = violation_part[1]) ~> violationdesc",
				"violationdesc derive(comments = iif(size(violation_part) > 1, violation_part[2], 'None')) ~> comments",
				"comments derive(violation_code = toInteger(trim(regexExtract(violation_desc, '^\\\\s*(\\\\d+)', 1)))) ~> ViolationCode",
				"source1 select(mapColumn(",
				"          Inspection_ID = {Inspection ID},",
				"          DBA_Name = {DBA Name},",
				"          AKA_Name = {AKA Name},",
				"          License_number = {License #},",
				"          Facility_Type = {Facility Type},",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Inspection_Date = {Inspection Date},",
				"          Inspection_Type = {Inspection Type},",
				"          Results,",
				"          Violations,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingColumns",
				"RowIDSK derive(violation_code = iif(isNull(violation_code), -1, violation_code)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ROWID as decimal(38,0),",
				"          INSPECTION_ID as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          ROWID = rowid,",
				"          INSPECTION_ID = Inspection_ID,",
				"          DBA_NAME = DBA_Name,",
				"          AKA_NAME = AKA_Name,",
				"          LICENSE_NUMBER = License_no,",
				"          FACILITY_TYPE = Facility_Type,",
				"          RISK = Risk,",
				"          ADDRESS = Address,",
				"          CITY = City,",
				"          STATE = State,",
				"          ZIP = Zip,",
				"          INSPECTION_DATE = Inspection_Date,",
				"          INSPECTION_TYPE = {Inspection _Type},",
				"          RESULTS = Results,",
				"          VIOLATIONS = Violations,",
				"          LATITUDE = Latitude,",
				"          LONGITUDE = Longitude,",
				"          LOCATION = Location,",
				"          VIOLATION_CODE = violation_code,",
				"          VIOLATION_DESC = violation_desc,",
				"          COMMENTS = comments",
				"     )) ~> sink1"
			]
		}
	}
}