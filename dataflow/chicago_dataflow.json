{
	"name": "chicago_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "chicago_dataset",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "splitandtoint"
				},
				{
					"name": "RowIDSK"
				},
				{
					"name": "Violationsdescandcomments"
				},
				{
					"name": "FlatteningViolations"
				},
				{
					"name": "violationdesc"
				},
				{
					"name": "comments"
				},
				{
					"name": "ViolationCode"
				},
				{
					"name": "RenamingColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Inspection ID} as string,",
				"          {DBA Name} as string,",
				"          {AKA Name} as string,",
				"          {License #} as string,",
				"          {Facility Type} as string,",
				"          Risk as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as string,",
				"          {Inspection Date} as string,",
				"          {Inspection Type} as string,",
				"          Results as string,",
				"          Violations as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"RenamingColumns derive(Zip = toInteger(Zip),",
				"          License_no = toInteger(License_number),",
				"          DBA_Name = iif(isNull(DBA_Name), \"Unknown\", DBA_Name),",
				"          Violations = split(Violations, '|')) ~> splitandtoint",
				"ViolationCode keyGenerate(output(rowid as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> RowIDSK",
				"FlatteningViolations derive(violation_part = split(Violations, ' - Comments: ')) ~> Violationsdescandcomments",
				"splitandtoint foldDown(unroll(Violations),",
				"     mapColumn(",
				"          Inspection_ID,",
				"          DBA_Name,",
				"          AKA_Name,",
				"          License_no,",
				"          Facility_Type,",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Inspection_Date,",
				"          {Inspection _Type} = Inspection_Type,",
				"          Results,",
				"          Violations,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlatteningViolations",
				"Violationsdescandcomments derive(violation_desc = violation_part[1]) ~> violationdesc",
				"violationdesc derive(comments = iif(size(violation_part) > 1, violation_part[2], '')) ~> comments",
				"comments derive(violation_code = toInteger(trim(regexExtract(violation_desc, '^\\\\s*(\\\\d+)', 1)))\r",
				") ~> ViolationCode",
				"source1 select(mapColumn(",
				"          Inspection_ID = {Inspection ID},",
				"          DBA_Name = {DBA Name},",
				"          AKA_Name = {AKA Name},",
				"          License_number = {License #},",
				"          Facility_Type = {Facility Type},",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Inspection_Date = {Inspection Date},",
				"          Inspection_Type = {Inspection Type},",
				"          Results,",
				"          Violations,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenamingColumns"
			]
		}
	}
}