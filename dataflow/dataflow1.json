{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "flatten2"
				},
				{
					"name": "flatten3"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Inspection ID} as integer,",
				"          {DBA Name} as string,",
				"          {AKA Name} as string,",
				"          {License #} as double,",
				"          {Facility Type} as string,",
				"          Risk as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          Zip as double,",
				"          {Inspection Date} as date,",
				"          {Inspection Type} as string,",
				"          Results as string,",
				"          Violations as string,",
				"          Latitude as string,",
				"          Longitude as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"select1 derive(Zip = toString(toInteger(Zip)),",
				"          License_no = toString(toInteger(License_no)),",
				"          DBA_Name = iif(isNull(DBA_Name), \"Unknown\", DBA_Name),",
				"          Violations = split(Violations, '|')) ~> derivedColumn1",
				"source1 select(mapColumn(",
				"          Inspection_ID = {Inspection ID},",
				"          DBA_Name = {DBA Name},",
				"          AKA_Name = {AKA Name},",
				"          License_no = {License #},",
				"          Facility_Type = {Facility Type},",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Inspection_Date = {Inspection Date},",
				"          {Inspection _Type} = {Inspection Type},",
				"          Results,",
				"          Violations,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"flatten2 keyGenerate(output(rowid as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"flatten3 derive(violation_part = split(Violations, ' - Comments: ')) ~> derivedColumn2",
				"derivedColumn5 foldDown(unroll(Violations),",
				"     mapColumn(",
				"          Inspection_ID,",
				"          DBA_Name,",
				"          AKA_Name,",
				"          License_no,",
				"          Facility_Type,",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Inspection_Date,",
				"          {Inspection _Type},",
				"          Results,",
				"          Violations = violation_code,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten2",
				"derivedColumn1 foldDown(unroll(Violations),",
				"     mapColumn(",
				"          Inspection_ID,",
				"          DBA_Name,",
				"          AKA_Name,",
				"          License_no,",
				"          Facility_Type,",
				"          Risk,",
				"          Address,",
				"          City,",
				"          State,",
				"          Zip,",
				"          Inspection_Date,",
				"          {Inspection _Type},",
				"          Results,",
				"          Violations,",
				"          Latitude,",
				"          Longitude,",
				"          Location",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten3",
				"derivedColumn2 derive(violation_desc = violation_part[1]) ~> derivedColumn3",
				"derivedColumn3 derive(comments = iif(size(violation_part) > 1, violation_part[2], '')) ~> derivedColumn4",
				"derivedColumn4 derive(violation_code = regexExtract(violation_desc, '^(\\\\d+)\\\\.', 1)) ~> derivedColumn5"
			]
		}
	}
}