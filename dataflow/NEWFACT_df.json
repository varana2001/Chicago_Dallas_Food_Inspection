{
	"name": "NEWFACT_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable11",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable12",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable13",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable16",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "dim_insp_fct",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "join1"
				},
				{
					"name": "select6"
				},
				{
					"name": "join2"
				},
				{
					"name": "select7"
				},
				{
					"name": "join3"
				},
				{
					"name": "select8"
				},
				{
					"name": "join4"
				},
				{
					"name": "select10"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BUISNESS_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          SOURCE_CITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          VIOLATION_ID as decimal(38,0),",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string,",
				"          SOURCE_CITY as string,",
				"          VIOLATION_POINTS as string,",
				"          LICENSE_NUMBER as decimal(15,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"source(output(",
				"          LOCATION_ID as decimal(38,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          STREET_NUMBER as string,",
				"          STREET_NAME as string,",
				"          STREET_TYPE as string,",
				"          STREET_DIRECTION as string,",
				"          STREET_UNIT as string,",
				"          LICENSE_NUMBER as decimal(15,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source3",
				"source(output(",
				"          RISK_ID as decimal(38,0),",
				"          RISK_DESC as string,",
				"          LICENSE_NUMBER as decimal(15,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source4",
				"source(output(",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          INSP_RESULT as string,",
				"          LICENSE_NUMBER as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source5",
				"source1 select(mapColumn(",
				"          BUISNESS_ID,",
				"          LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source2 select(mapColumn(",
				"          VIOLATION_ID,",
				"          LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"source3 select(mapColumn(",
				"          LOCATION_ID,",
				"          LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"source4 select(mapColumn(",
				"          RISK_ID,",
				"          LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"source5 select(mapColumn(",
				"          INSPECTION_SK,",
				"          LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5, select1 join(select5@LICENSE_NUMBER == select1@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          INSPECTION_SK,",
				"          LICENSE_NUMBER = select5@LICENSE_NUMBER,",
				"          BUISNESS_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6, select2 join(select6@LICENSE_NUMBER == select2@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          INSPECTION_SK,",
				"          LICENSE_NUMBER = select6@LICENSE_NUMBER,",
				"          BUISNESS_ID,",
				"          VIOLATION_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select7",
				"select7, select3 join(select7@LICENSE_NUMBER == select3@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          INSPECTION_SK,",
				"          LICENSE_NUMBER = select7@LICENSE_NUMBER,",
				"          BUISNESS_ID,",
				"          VIOLATION_ID,",
				"          LOCATION_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select8",
				"select8, select4 join(select8@LICENSE_NUMBER == select4@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"join4 select(mapColumn(",
				"          INSPECTION_SK,",
				"          LICENSE_NUMBER = select8@LICENSE_NUMBER,",
				"          BUISNESS_ID,",
				"          VIOLATION_ID,",
				"          LOCATION_ID,",
				"          RISK_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select10",
				"aggregate1 keyGenerate(output(Fact_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"select10 aggregate(groupBy(INSPECTION_SK,",
				"          LICENSE_NUMBER,",
				"          BUISNESS_ID,",
				"          VIOLATION_ID,",
				"          LOCATION_ID,",
				"          RISK_ID),",
				"     NUMBER = first(LICENSE_NUMBER)) ~> aggregate1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}