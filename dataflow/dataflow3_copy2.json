{
	"name": "dataflow3_copy2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable5",
						"type": "DatasetReference"
					},
					"name": "ins"
				},
				{
					"dataset": {
						"referenceName": "business",
						"type": "DatasetReference"
					},
					"name": "business"
				},
				{
					"dataset": {
						"referenceName": "violation",
						"type": "DatasetReference"
					},
					"name": "violation"
				},
				{
					"dataset": {
						"referenceName": "risk",
						"type": "DatasetReference"
					},
					"name": "risk"
				},
				{
					"dataset": {
						"referenceName": "loc",
						"type": "DatasetReference"
					},
					"name": "location"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable6",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "factt",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "window2"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select3"
				},
				{
					"name": "window4"
				},
				{
					"name": "filter3"
				},
				{
					"name": "join4"
				},
				{
					"name": "select4"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join5"
				},
				{
					"name": "window5"
				},
				{
					"name": "filter4"
				},
				{
					"name": "window6"
				},
				{
					"name": "filter5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          LICENSE_NUMBER as decimal(15,0),",
				"          INSP_RESULT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> ins",
				"source(output(",
				"          BUISNESS_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          SOURCE_CITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> business",
				"source(output(",
				"          VIOLATION_ID as decimal(38,0),",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string,",
				"          SOURCE_CITY as string,",
				"          VIOLATION_POINTS as string,",
				"          LICENSE_NUMBER as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> violation",
				"source(output(",
				"          RISK_ID as decimal(38,0),",
				"          LICENSE_NUMBER as decimal(15,0),",
				"          RISK_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> risk",
				"source(output(",
				"          LOCATION_ID as decimal(38,0),",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          STREET_NUMBER as string,",
				"          STREET_NAME as string,",
				"          STREET_TYPE as string,",
				"          LICENSE_NUMBER as decimal(15,0),",
				"          STREET_DIRECTION as string,",
				"          STREET_UNIT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> location",
				"source(output(",
				"          DATE_ID as decimal(18,0),",
				"          DT as date,",
				"          DAY as decimal(2,0),",
				"          MONTH as decimal(2,0),",
				"          MONTH_NAME as string,",
				"          YEAR as decimal(4,0),",
				"          QUARTER as decimal(2,0),",
				"          WEEK as decimal(2,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"ins, business join(ins@LICENSE_NUMBER == business@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join5 aggregate(groupBy(INSPECTION_ID,",
				"          ins@LICENSE_NUMBER,",
				"          INSPECTION_DATE,",
				"          INSPECTION_SCORE,",
				"          INSP_RESULT,",
				"          DATE_ID),",
				"     b_id = first(BUISNESS_ID)) ~> aggregate1",
				"aggregate1 window(over(LICENSE_NUMBER),",
				"     asc(INSPECTION_ID, true),",
				"     rank = rank()) ~> window2",
				"window2 filter(rank == 1) ~> filter1",
				"filter1 select(mapColumn(",
				"          INSPECTION_ID,",
				"          LICENSE_NUMBER,",
				"          b_id,",
				"          DATE_ID,",
				"          INSPECTION_SCORE,",
				"          INSP_RESULT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, violation join(select1@LICENSE_NUMBER == violation@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"filter5 select(mapColumn(",
				"          INSPECTION_ID,",
				"          LICENSE_NUMBER = select1@LICENSE_NUMBER,",
				"          b_id,",
				"          VIOLATION_ID = rank_,",
				"          DATE_ID,",
				"          INSPECTION_SCORE,",
				"          INSP_RESULT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, location join(select2@LICENSE_NUMBER == location@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          INSPECTION_ID,",
				"          b_id,",
				"          VIOLATION_ID,",
				"          LOCATION_ID,",
				"          LICENSE_NUMBER = location@LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 window(over({select3.LICENSE_NUMBER} = LICENSE_NUMBER),",
				"     asc(LOCATION_ID, true),",
				"     rank2 = rank()) ~> window4",
				"window4 filter(rank2 == 1) ~> filter3",
				"filter3, risk join(select3@LICENSE_NUMBER == risk@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join4",
				"filter4 select(mapColumn(",
				"          INSPECTION_ID,",
				"          b_id,",
				"          VIOLATION_ID,",
				"          LOCATION_ID,",
				"          RISK_ID,",
				"          LICENSE_NUMBER = risk@LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4 keyGenerate(output(sk as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"source1 derive(DT = toString(DT, 'MM/dd/yyyy')) ~> derivedColumn1",
				"join1, derivedColumn1 join(INSPECTION_DATE == DT,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join5",
				"join4 window(over({join4.LICENSE_NUMBER} = select3@LICENSE_NUMBER),",
				"     asc(VIOLATION_ID, true),",
				"     rank3 = rank()) ~> window5",
				"window5 filter(rank3==1) ~> filter4",
				"join2 window(over({join2.LICENSE_NUMBER} = select1@LICENSE_NUMBER),",
				"     asc(VIOLATION_ID, true),",
				"     rank_ = rank()) ~> window6",
				"window6 filter(rank_ == 1) ~> filter5",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FACT_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          LOCATION_ID as decimal(38,0),",
				"          VIOLATION_ID as decimal(38,0),",
				"          BUISNESS_ID as decimal(38,0),",
				"          RISK_ID as decimal(38,0),",
				"          LICENSE_NUMBER as decimal(15,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          FACT_SK = sk,",
				"          INSPECTION_ID,",
				"          LOCATION_ID,",
				"          VIOLATION_ID,",
				"          BUISNESS_ID = b_id,",
				"          RISK_ID,",
				"          LICENSE_NUMBER",
				"     )) ~> sink1"
			]
		}
	}
}