{
	"name": "inspection_dallas",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DIM_Business",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable5",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable5",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "surrogateKey2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ROWID as decimal(38,0),",
				"          INSPECTION_ID as string,",
				"          RESTAURANTNAME as string,",
				"          INSPECTIONTYPE as string,",
				"          INSPECTIONDATE as string,",
				"          INSPECTIONSCORE as string,",
				"          STREETNUMBER as string,",
				"          STREETNAME as string,",
				"          STREETDIRECTION as string,",
				"          STREETTYPE as string,",
				"          STREETUNIT as string,",
				"          STREETADDRESS as string,",
				"          ZIPCODE as string,",
				"          INSPECTIONMONTH as string,",
				"          INSPECTIONYEAR as string,",
				"          LATLONGLOCATION as string,",
				"          VIOLATIONS as string,",
				"          COMMENTS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          BUISNESS_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"source(output(",
				"          MAX as decimal(38,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'SELECT(MAX(INSPECTION_SK)) AS MAX FROM INSPECTION',",
				"     format: 'query') ~> source3",
				"source1 select(mapColumn(",
				"          INSPECTION_ID,",
				"          RESTAURANTNAME,",
				"          INSPECTIONTYPE,",
				"          INSPECTIONDATE,",
				"          INSPECTIONSCORE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, source2 join(RESTAURANTNAME == DBA_NAME,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(LICENSE_NUMBER,",
				"          INSPECTION_ID,",
				"          INSPECTIONTYPE,",
				"          INSPECTIONDATE,",
				"          INSPECTIONSCORE),",
				"     lic_no = first(LICENSE_NUMBER)) ~> aggregate1",
				"join2 keyGenerate(output(SKK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"aggregate1, source3 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"surrogateKey2 derive(SK = MAX+ SKK,",
				"          result = \"-1\",",
				"          INSPECTIONTYPE = iif(isNull(INSPECTIONTYPE), \"None\", INSPECTIONTYPE)) ~> derivedColumn1",
				"surrogateKey1 keyGenerate(output(Inspection_id as long),",
				"     startAt: 87715L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          INSPECTION_SK as decimal(38,0),",
				"          INSPECTION_ID as decimal(38,0),",
				"          INSPECTION_TYPE as string,",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_SCORE as decimal(38,0),",
				"          LICENSE_NUMBER as decimal(15,0),",
				"          INSP_RESULT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          INSPECTION_SK = SK,",
				"          INSPECTION_ID = surrogateKey2@Inspection_id,",
				"          INSPECTION_TYPE = INSPECTIONTYPE,",
				"          INSPECTION_DATE = INSPECTIONDATE,",
				"          INSPECTION_SCORE = INSPECTIONSCORE,",
				"          LICENSE_NUMBER,",
				"          INSP_RESULT = result",
				"     )) ~> sink1"
			]
		}
	}
}