{
	"name": "bus_vio",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable10",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable17",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "stgchicagoSnowflakeTable",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				},
				{
					"name": "join2"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BUISNESS_ID as decimal(38,0),",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          SOURCE_CITY as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source1",
				"source(output(",
				"          VIOLATION_ID as decimal(38,0),",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string,",
				"          SOURCE_CITY as string,",
				"          VIOLATION_POINTS as string,",
				"          LICENSE_NUMBER as decimal(15,0)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source2",
				"source(output(",
				"          ROWID as decimal(38,0),",
				"          INSPECTION_ID as string,",
				"          DBA_NAME as string,",
				"          AKA_NAME as string,",
				"          LICENSE_NUMBER as decimal(38,0),",
				"          FACILITY_TYPE as string,",
				"          RISK as string,",
				"          ADDRESS as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP as decimal(38,0),",
				"          INSPECTION_DATE as string,",
				"          INSPECTION_TYPE as string,",
				"          RESULTS as string,",
				"          VIOLATIONS as string,",
				"          LATITUDE as string,",
				"          LONGITUDE as string,",
				"          LOCATION as string,",
				"          VIOLATION_CODE as decimal(38,0),",
				"          VIOLATION_DESC as string,",
				"          COMMENTS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> source3",
				"source1, source2 join(source1@LICENSE_NUMBER == source2@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 aggregate(groupBy(DBA_NAME,",
				"          BUISNESS_ID,",
				"          LICENSE_NUMBER,",
				"          VIOLATION_ID),",
				"     name = first(DBA_NAME)) ~> aggregate1",
				"join1 select(mapColumn(",
				"          BUISNESS_ID,",
				"          DBA_NAME,",
				"          VIOLATION_ID,",
				"          LICENSE_NUMBER = source2@LICENSE_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"aggregate1, source3 join(aggregate1@LICENSE_NUMBER == source3@LICENSE_NUMBER,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          DBA_NAME = aggregate1@DBA_NAME,",
				"          BUISNESS_ID,",
				"          LICENSE_NUMBER = aggregate1@LICENSE_NUMBER,",
				"          VIOLATION_ID,",
				"          name,",
				"          INSPECTION_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2"
			]
		}
	}
}